[DataPaths]

# Data source (options: file, mongodb, sql)
source_type: file

# Data destination (options: file, mongodb)
# If mongodb, the data are stored both in file and mongodb
dest_type: mongodb

# DB settings
db_name: 
db_user: 

# Mongo DB settings
db_hostname: 
db_pwd: 
db_label_coll_name: labelData
db_history_coll_name: labelHistory
db_port: 

# SQL DB settings
db_server:
db_password:
# db_connector can be mysql or sqlite3
db_connector:
db_label_values_tablename: label_label
db_label_info_tablename: label_info
db_preds_tablename: predictions
db_history_tablename: labelhistory
# Name of the columns in sql databases that contain the item reference
db_ref_name = Referencia

# DB writing mode: rewrite or update
db_mode: update

# Transfer mode to/from file or db: rewrite or update
db_file2db_mode: rewrite
db_db2file_mode: update

# Labelling subfolders
input_folder: input
output_folder: output
used_folder: used

# Filenames (only names, not extensions)
dataset_fname: dataset
labelhistory_fname: labelhistory
labels_endname: _labels
preds_endname: _predict
urls_fname: urls
export_labels_fname: exported_labels

[Labeler]
# Transfer type: this variable states the way to incorporate new data
#    project (no new urls are accepted from the input folder)
#    expand  (new urls are accepted)
#    contract (only urls in the input folder are preserved in the data structure)
transfer_mode: project

# Type of wid: if 'yes', the wid is computed as a transformation of the url.
#              if 'no', the wid is taken equal to the url.
#              if 'www', the wid is the result of removing www. from the url
compute_wid: no

# Type of data: if 'url': the data is a url shown in a browser
#               if 'txt': the data is printed.
datatype: url

# Type of taxonomy: single (mutually exclusive classes), multi (multilabel)
cat_model: single

# List of categories. 
# If cat_model = single, every pair of categories A and B must satisfy 
# A in B, B in A, or intersection(A, B) = emptyset
categories: ['Business-', 'Shop Online', 'Real Estate', 'Hotel', 'Transport', 
             'Newspapers',
             'Community-', 'Personal', 'Church', 'Blog',
             'Institution-', 'City',
             'Passwd-',
             'Adult-',
             'Education-', 'SchoolUniv', 'Research',
             'PPClick-',
             'Holding-', 'Under Constr']

# Dictionary of dependencies between categories
# {A:B, C:D, E:D } means that A is a subclass of B and C and E are 
# subclasses of D
parentcat: {'Shop Online': 'Business-',
            'Real Estate': 'Business-',
            'Hotel': 'Business-',
            'Transport': 'Business-',
            'Newspapers': 'Business-',
            'Personal': 'Community-',
            'Church': 'Community-',
            'Blog': 'Community-',
            'City': 'Institution-',
            'SchoolUniv': 'Education-',
            'Research': 'Education-',
            'Under Constr': 'Holding-'
           }

# If the categories are complete (i.e. they fill the observation space) then set
# fill_with_Other to no. Otherwise, set fill_with_Other to yes, and a category
# 'Other' will be added to the category set
fill_with_Other: yes

# List of labels
yes_label: 1
no_label: -1
unknown_label = 0
error_label = -99

# Default value for predictions
unknown_pred = 0

# Set the following to True if a user identifier will be requested in order 
# to track different labelers.
track_user: yes

[ActiveLearning]
# In multiclass cases, the reference class is the class used by the active
# learning algorithm to compute the sample scores.
ref_class: Business-
